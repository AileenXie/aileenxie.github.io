<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on Aileen&#39;s Blog</title>
    <link>https://aileenxie.github.io/tags/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on Aileen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch-cn</language>
    <lastBuildDate>Tue, 27 Aug 2019 08:50:51 +0800</lastBuildDate>
    
	<atom:link href="https://aileenxie.github.io/tags/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Matlab配置Xcode编译</title>
      <link>https://aileenxie.github.io/2019/11xcode/</link>
      <pubDate>Tue, 27 Aug 2019 08:50:51 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2019/11xcode/</guid>
      <description>Matlab使用时经常需要编译一些其他语言的文件来调用，这需要相应的编译器来完成编译过程。Mac上编译C/C++可以选用Xcode。
安装Xcode Appstores 就能直接下载安装Xcode
安装command line tools 在终端上输入：
xcode-select --install  然后会有弹窗提示安装，跟着向导一步步完成安装。
确认安装成功的方法是：打开Xcode -&amp;gt; New -&amp;gt; Project，看到Command line tools。 打开matlab项目，运行命令，看是否成功检测到编译器。
mex -setup  　　还不成功 ？ 可能需要进行的操作&amp;hellip;
我在Matlab R2018a和Xcode v10.1环境下，安装完Command line tools之后再运行mex -setup就能成功找到编译器了！但是我看其他人有碰到需要更改配置文件的步骤，我还是记录一下，以便以后遇到问题多一条思路。具体方法是替换Matlab的启动和配置文件mexopts.sh和clang_maci64.xml里MacOSX版本号。
查看本机MacOSX SDK版本号  在/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs中查看自己的版本号：  或者终端运行命令
xcrun -sdk macosx --show-sdk-path  或
xcrun -sdk macosx --show-sdk-version   更改mexopts.sh文件  打开Matlab，命令行运行
edit ([matlabroot &#39;/bin/mexopts.sh&#39;])  打开mexopts.sh文件，以防万一提前备份一下该文件。把该文件中所有macosx10.x更改为本机MacOS版本号。
 让更改生效：
cd (matlabroot) cd bin mex -setup  输入1，然后回车，输入y，回车。 详见CSDN博文</description>
    </item>
    
    <item>
      <title>Matlab下Libsvm安装使用</title>
      <link>https://aileenxie.github.io/2019/10libsvm/</link>
      <pubDate>Mon, 26 Aug 2019 23:34:14 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2019/10libsvm/</guid>
      <description>下载 从github上拉取源码到你想放的目录（我放在matlab工作目录/toolbox/），源码地址：GitHub - cjlin1/libsvm。
编译 文件windows/目录下有预先编译好的libsvmread.mexw64、libsvmwrite.mexw64、svmtrain.mexw64、svmpredict.mexw64文件。如果是windows 64位下的matlab可以直接使用这些编译文件。
我的是mac版的matlab,需要重新编译相应的.mexmaci64文件，windows32的则是编译出.mexw32文件。具体来说：
 先确保电脑装了C/C++编译器，我电脑本身装了Xcode自带Clang，不需要再装编译器了，没装的随便装个编译器再进行下面的步骤（参考Matlab配置Xcode编译）。
 在Matlab中进入Libsvm根目录下的matlab目录（如:toolbox/libsvm-3.23/matlab），在命令窗口输入
mex –setup  Matlab会提示你选择编译mex文件的C/C++编译器，就选择一个已安装的编译器，如Xcode with Clang。之后Matlab会提示确认选择的编译器，输入y进行确认。  输入以下命令进行编译:
make  编译成功后，当前目录下会出现4个后缀为mexmaci64的文件。（tips:Matlab或VC版本过低可能会导致编译失败，建议使用最新的版本）。
 把编译出的这4个文件加入matlab的路径以便之后的调用。
  重命名 编译好后，由于产生的文件svmtrain和svmpredict与Matlab中自带有SVM的工具箱中的函数同名，为了避免调用不了，可以把这两个文件的编译文件重命名一下。我是重命名成了libsvmtrain和libsvmpredict，然后用新的名字来调用函数即可。
基本使用 libsvmread函数 用来读取以LIBSVM格式存储的数据文件。libsvm包根目录里有个示例数据文件heart-scale。
[label_vector, instance_matrix] = libsvmread(&amp;quot;heart-scale.txt&amp;quot;);  函数输出：label_vector是数据标签，instance_matrix是数据矩阵。
libsvmwrite函数 用来把matlab数据矩阵和标签存成LIBSVM格式数据文件data.txt:
libsvmwrite(&amp;quot;data.txt&amp;quot;, label_vector, instance_matrix]  libsvmtrain函数 用来训练SVM分类器模型，具体参数如下：
model = svmtrain(label,inst,Parameters)  其中：model.Paramaters = [-s,-t,-d,-g,-r]
 【输入】数据标签+数据矩阵+Parameters: 一个5 x 1的向量，从上到下依次表示：
　-s SVM类型（默认0）:
　0 &amp;ndash; C-SVC,
　1 &amp;ndash; nu-SVC,</description>
    </item>
    
    <item>
      <title>AI线稿上色——Style2paints</title>
      <link>https://aileenxie.github.io/2019/08style2paints/</link>
      <pubDate>Thu, 31 Jan 2019 21:03:40 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2019/08style2paints/</guid>
      <description>快期末的时候喜得一个wacon的板子，很久没画画了，业务生疏还有点不习惯，画得很慢。偶然被推荐一个很有意思的开源项目Style2paints（源码地址），一个AI线稿上色工具，可以快速地进行线稿的智能上色。
但是很不巧，1月18号Style2paints-V4版本的服务器就因为经费原因关闭了，我看到这个项目的时候已经无法在线访问了，只好尝试本地搭环境启动。目前代码只开源了V3版本，看官方描述V3和V4差别还蛮大的。V4是模拟人工上色流程对线稿进行分层上色，输出也是PSD分层的文件，V3输出的是单层的图片，操作也不太一样。
V3页面（自截图）： V4页面（官方介绍视频里截的）：
这里记录一下mac上Style2paints-V3本地搭建的过程。
1. Python环境 首先要准备python3的环境，mac下的安装可以参考之前的文章，用homebrew直接安装。
2. 依赖包 这里没有用gpu版本的tensorflow，安装以下依赖包：
pip3 install tensorflow (安装需要翻墙，全局模式命令行安装)
pip3 install keras
pip3 install bottle
pip3 install gevent
pip3 install h5py
pip3 install opencv-python
pip3 install scikit-image
pip3 install paste
3.源码运行 拉取源码：
git clone https://github.com/lllyasviel/style2paints  到V3目录下执行server/server.py文件。正常运行的话可以直接本地打开 http://127.0.0.1:80/ 就能看到界面。但是我运行的过程中有以下几点异常。
4. Q:Tensorflow编译警告  Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX
原因是CPU支持AVX扩展(高级矢量扩展)，但是默认安装（pip install）的TensorFlow版本不支持使用扩展。其实用了扩展CPU也比GPU慢得多。解决办法有两个：
1）忽略警告，直接在server.py代码中加入：
import os os.environ[&#39;TF_CPP_MIN_LOG_LEVEL&#39;] = &#39;2&#39;  2)源码编译tensorflow 从针对CPU优化的源去构建tensorflow，不仅可以去掉这个警告，还能提高CPU下的tensorflow的性能。具体参考tensorflow的issue8037</description>
    </item>
    
    <item>
      <title>论文书写工具准备——MacTeX</title>
      <link>https://aileenxie.github.io/2018/07use_mactex/</link>
      <pubDate>Mon, 19 Nov 2018 20:00:38 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2018/07use_mactex/</guid>
      <description>前言  TEX：斯坦福大学的教授Donald E.Knuth开发的一个功能强大的幕后排版系统。它是一种语言，类似于Java和C之类的计算机语言，但是它是为简单的排版操作设计的； LaTeX：是TEX的众多宏集之一，是由Leslie Lamport编写的。将一些常用到的功能整合为文档类型中的设置，简化了TEX排版的工作量及难度； CTEX：利用TEX排版系统的CTEX中文套装的简称。它集成了编辑器 、WinEdt和 PostScript处理软件 Ghostscript 和 GSview 等主要工具。 TeXLiv：是一个TeX发行版，它是一组程序的集合，主要作用就是将你写的TeX代码进行解析排版输出成PS或者PDF。“TeX发行版相对于TeX语言”大致可以理解为“C语言编译器(如GCC或Clang)相对于C语言”的关系； MacTeX：是Mac版的TeXLive。  本文MacTeX搭配Sublime(编辑器)和Skim(PDF阅读器)食用。
MacTeX安装 官网：http://tug.org/mactex/ 安装好后会看到一串东西（我把它们放到了同一个文件夹里）： TeXShop：它是一个官配的编辑器，比较简单。我们这里用Sublime取代。
Sublime和Skim安装 Sublime官网：https://www.sublimetext.com/ Skim官网：https://skim-app.sourceforge.io/ 图标长这样： 环境配置 Sublime配置 打开Sublime，我们需要安装LaTeX相关插件才能更好地使用，插件从Package Control官网下载，步骤如下： 1. 进入Sublime的终端：ctrl+ [esc下面那个顿号] 或 View &amp;gt; Show Consoles 2. 从Package Control官网复制灰色代码段输入Sublime的终端并回车运行，注意对应的版本号： 3. 等待安装完成后，退出重启Sublime; 4. 安装插件包：Command+Shift+P或Tools &amp;gt; Command Palette…&amp;mdash;&amp;gt;输入&amp;rdquo;install package&amp;rdquo;回车&amp;mdash;&amp;gt;输入“LaTeX Tools”，找到这一项并点击安装。完成后重启Sublime。 5. 新建一个文件test.tex(一定要有后缀.tex!!!)，复制以下内容进去：
\documentclass{article} \begin{document} Hello LaTeX \end{document}  可看到Latex格式文件有彩色样式，完成！
Skim配置 打开Skim后，Command+,或Skim &amp;gt; 选项（performance）&amp;mdash;&amp;gt;点到【同步（sync）】页&amp;mdash;&amp;gt;设置Preset为Sublime(不知道为什么我这边没有Sublime3选项，选了2也可行) 测试环境 回到Sublime刚才新建的test.tex文件，Command+B或Tools &amp;gt; Build编译tex文件，顺利的话，Skim会自动弹出PDF文件预览窗口。环境搭建成功！
至此整个环境就搭完了，具体怎么用mactex写出漂亮的文章和公式参考LaTeX快速入门：一文浅谈TeX排版语法，还有些小技巧我会之后总结一篇文章。待续。
参考文章1 参考文章2</description>
    </item>
    
    <item>
      <title>Mac下安装Python3</title>
      <link>https://aileenxie.github.io/2018/06python_mac/</link>
      <pubDate>Mon, 19 Nov 2018 20:00:13 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2018/06python_mac/</guid>
      <description> -- 简单记录mac下Python3安装步骤。
安装Python3  应先安装C编译器。最快的方式是运行
xcode-select --install  来安装Xcode命令行工具。
 安装一个包管理工具Homebrew
$ /usr/bin/ruby -e &amp;quot; $ (curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  插入PATH（在~/.profile文件末尾加）
export PATH=/usr/local/bin:/usr/local/sbin:$PATH  (source .profile 一下使之生效)
 安装Python3
brew install python  查看
python3 --version  确定pip是否安装
pip3 --version  若未安装
python3 -m ensurepip --default-pip  pip的使用详见相关参考文档
  </description>
    </item>
    
    <item>
      <title>Hugo快速搭建博客</title>
      <link>https://aileenxie.github.io/2018/01hugoblog/</link>
      <pubDate>Fri, 05 Oct 2018 21:52:20 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2018/01hugoblog/</guid>
      <description>简单记录一下mac下用Hugo搭建博客的过程，以便日后查阅。感谢renyijiu的安利和帮助。
Hugo  一个用Go语言写的静态网站生成器 能把markdown转变成静态网页 内置web服务期，便于本地草稿调试  安装 Hugo  直接用Homebrew安装
brew install hugo  完成之后查看版本，我目前装的是0.49
hugo version  创建一个新站点 到你的目录下找个喜欢的地方执行语句
hugo new site myblog   会在当前目录生成一个叫“myblog”的目录，里面包含若干文件夹和一个config.toml文件:
▸ archetypes/
▸ content/ -&amp;gt;你写的markdown文章
▸ layouts/ -&amp;gt;网站的模板文件
▸ static/ -&amp;gt;放的是一些图片、css、js等资源
▸ data/
▸ themes/ -&amp;gt;放的是你之后添加的主题
config.toml -&amp;gt;网站的配置文件
添加主题  进入目录页
cd myblog  初始化为git项目，方便之后放入github或者任何仓库进行版本管理
git init  添加主题, 以LeaveIt为例
git submodule add https://github.com/liuzc/LeaveIt.git themes/LeaveIt  之后会在themes/目录下看到你添加的主题。
 修改配置文件(直接打开config.toml文件修改也是一样的)
echo &#39;theme = &amp;quot;LeaveIt&amp;quot;&#39; &amp;gt;&amp;gt; config.</description>
    </item>
    
  </channel>
</rss>