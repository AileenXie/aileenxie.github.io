<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matlab on Aileen&#39;s Blog</title>
    <link>https://aileenxie.github.io/tags/matlab/</link>
    <description>Recent content in matlab on Aileen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch-cn</language>
    <lastBuildDate>Mon, 26 Aug 2019 23:34:14 +0800</lastBuildDate>
    
	<atom:link href="https://aileenxie.github.io/tags/matlab/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Matlab下Libsvm安装使用</title>
      <link>https://aileenxie.github.io/2019/10libsvm/</link>
      <pubDate>Mon, 26 Aug 2019 23:34:14 +0800</pubDate>
      
      <guid>https://aileenxie.github.io/2019/10libsvm/</guid>
      <description>下载 从github上拉取源码到你想放的目录（我放在matlab工作目录/toolbox/），源码地址：GitHub - cjlin1/libsvm。
编译 文件windows/目录下有预先编译好的libsvmread.mexw64、libsvmwrite.mexw64、svmtrain.mexw64、svmpredict.mexw64文件。如果是windows 64位下的matlab可以直接使用这些编译文件。
我的是mac版的matlab,需要重新编译相应的.mexmaci64文件，windows32的则是编译出.mexw32文件。具体来说：
 先确保电脑装了C/C++编译器，我电脑本身装了Xcode自带Clang，不需要再装编译器了，没装的随便装个编译器再进行下面的步骤。
 在Matlab中进入Libsvm根目录下的matlab目录（如:toolbox/libsvm-3.23/matlab），在命令窗口输入
mex –setup  Matlab会提示你选择编译mex文件的C/C++编译器，就选择一个已安装的编译器，如Xcode with Clang。之后Matlab会提示确认选择的编译器，输入y进行确认。  输入以下命令进行编译:
make  编译成功后，当前目录下会出现4个后缀为mexmaci64的文件。（tips:Matlab或VC版本过低可能会导致编译失败，建议使用最新的版本）。
 把编译出的这4个文件加入matlab的路径以便之后的调用。
  重命名 编译好后，由于产生的文件svmtrain和svmpredict与Matlab中自带有SVM的工具箱中的函数同名，为了避免调用不了，可以把这两个文件的编译文件重命名一下。我是重命名成了libsvmtrain和libsvmpredict，然后用新的名字来调用函数即可。
基本使用 libsvmread函数 用来读取以LIBSVM格式存储的数据文件。libsvm包根目录里有个示例数据文件heart-scale。
[label_vector, instance_matrix] = libsvmread(&amp;quot;heart-scale.txt&amp;quot;);  函数输出：label_vector是数据标签，instance_matrix是数据矩阵。
libsvmwrite函数 用来把matlab数据矩阵和标签存成LIBSVM格式数据文件data.txt:
libsvmwrite(&amp;quot;data.txt&amp;quot;, label_vector, instance_matrix]  libsvmtrain函数 用来训练SVM分类器模型，具体参数如下：
 【输入】数据标签+数据矩阵+Parameters: 一个5 x 1的向量，从上到下依次表示：
　-s SVM类型（默认0）:
　0 &amp;ndash; C-SVC,
　1 &amp;ndash; nu-SVC,
　2 &amp;ndash; one-class SVM,
　3 &amp;ndash; epsilon-SVR</description>
    </item>
    
  </channel>
</rss>